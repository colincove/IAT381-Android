package com.example.assignment03;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

import android.opengl.GLES20;

public class Triangle {

	 public Triangle() {
	        // initialize vertex byte buffer for shape coordinates
	        ByteBuffer bb = ByteBuffer.allocateDirect(
	                // (number of coordinate values * 4 bytes per float)
	                triangleCoords.length * 4);
	        // use the device hardware's native byte order
	        bb.order(ByteOrder.nativeOrder());

	        // create a floating point buffer from the ByteBuffer
	        vertexBuffer = bb.asFloatBuffer();
	        // add the coordinates to the FloatBuffer
	        vertexBuffer.put(triangleCoords);
	        // set the buffer to read the first coordinate
	        vertexBuffer.position(0);

	        // prepare shaders and OpenGL program
	        int vertexShader = GlRenderer.loadShader(GLES20.GL_VERTEX_SHADER,
	                                                   vertexShaderCode);
	        int fragmentShader = GlRenderer.loadShader(GLES20.GL_FRAGMENT_SHADER,
	                                                     fragmentShaderCode);

	        mProgram = GLES20.glCreateProgram();             // create empty OpenGL Program
	        GLES20.glAttachShader(mProgram, vertexShader);   // add the vertex shader to program
	        GLES20.glAttachShader(mProgram, fragmentShader); // add the fragment shader to program
	        GLES20.glLinkProgram(mProgram);                  // create OpenGL program executables

	    }

	    public void draw(float[] mvpMatrix) {
	        // Add program to OpenGL environment
	        GLES20.glUseProgram(mProgram);

	        // get handle to vertex shader's vPosition member
	        mPositionHandle = GLES20.glGetAttribLocation(mProgram, "vPosition");

	        // Enable a handle to the triangle vertices
	        GLES20.glEnableVertexAttribArray(mPositionHandle);

	        // Prepare the triangle coordinate data
	        GLES20.glVertexAttribPointer(mPositionHandle, COORDS_PER_VERTEX,
	                                     GLES20.GL_FLOAT, false,
	                                     vertexStride, vertexBuffer);

	        // get handle to fragment shader's vColor member
	        mColorHandle = GLES20.glGetUniformLocation(mProgram, "vColor");

	        // Set color for drawing the triangle
	        GLES20.glUniform4fv(mColorHandle, 0, color, 0);

	        // get handle to shape's transformation matrix
	        mMVPMatrixHandle = GLES20.glGetUniformLocation(mProgram, "uMVPMatrix");

	        // Apply the projection and view transformation
	        GLES20.glUniformMatrix4fv(mMVPMatrixHandle, 1, false, mvpMatrix, 0);

	        // Draw the triangle
	        GLES20.glDrawArrays(GLES20.GL_TRIANGLES, 0, vertexCount);

	        // Disable vertex array
	        GLES20.glDisableVertexAttribArray(mPositionHandle);
	    }
	}
}
